// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ThemeContext should change theme based on callback function 1`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <SystemApp>
        <ThemedComponent>
          <SystemApp>
            <ThemePicker>
              <Picker
                mode="dialog"
                onValueChange={[Function]}
                selectedValue="bluebase-light"
                style={
                  Object {
                    "width": 150,
                  }
                }
              >
                <PickerIOS
                  mode="dialog"
                  onValueChange={[Function]}
                  selectedValue="bluebase-light"
                  style={
                    Object {
                      "width": 150,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "width": 150,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "width": 150,
                        }
                      }
                    >
                      <_class
                        items={
                          Array [
                            Object {
                              "label": "BlueBase Light",
                              "textColor": undefined,
                              "value": "bluebase-light",
                            },
                            Object {
                              "label": "BlueBase Dark",
                              "textColor": undefined,
                              "value": "bluebase-dark",
                            },
                          ]
                        }
                        onChange={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        selectedIndex={0}
                        style={
                          Array [
                            Object {
                              "height": 216,
                            },
                            undefined,
                          ]
                        }
                      >
                        <RCTPicker
                          items={
                            Array [
                              Object {
                                "label": "BlueBase Light",
                                "textColor": undefined,
                                "value": "bluebase-light",
                              },
                              Object {
                                "label": "BlueBase Dark",
                                "textColor": undefined,
                                "value": "bluebase-dark",
                              },
                            ]
                          }
                          onChange={[Function]}
                          onResponderTerminationRequest={[Function]}
                          onStartShouldSetResponder={[Function]}
                          selectedIndex={0}
                          style={
                            Array [
                              Object {
                                "height": 216,
                              },
                              undefined,
                            ]
                          }
                        />
                      </_class>
                    </View>
                  </View>
                </PickerIOS>
              </Picker>
            </ThemePicker>
            <ThemeDemo>
              <View
                style={
                  Object {
                    "backgroundColor": "#fafafa",
                    "padding": 8,
                  }
                }
              >
                <ThemedComponent
                  style={
                    Object {
                      "backgroundColor": "#fafafa",
                      "padding": 8,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "backgroundColor": "#fafafa",
                        "padding": 8,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "backgroundColor": "#fafafa",
                          "padding": 8,
                        }
                      }
                    >
                      <Body1>
                        <ThemedComponent>
                          <Component
                            styles={
                              Object {
                                "root": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": "Helvetica",
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                              }
                            }
                          >
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "Helvetica",
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  undefined,
                                ]
                              }
                            >
                              <Text
                                style={
                                  Array [
                                    Object {
                                      "color": "rgba(0, 0, 0, 0.87)",
                                      "fontFamily": "Helvetica",
                                      "fontSize": 16,
                                      "fontWeight": "400",
                                    },
                                    undefined,
                                  ]
                                }
                              >
                                BlueBase Light
                              </Text>
                            </Text>
                          </Component>
                        </ThemedComponent>
                      </Body1>
                    </View>
                  </View>
                </ThemedComponent>
              </View>
            </ThemeDemo>
          </SystemApp>
        </ThemedComponent>
      </SystemApp>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`ThemeContext should change theme based on callback function 2`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <SystemApp>
        <ThemedComponent>
          <SystemApp>
            <ThemePicker>
              <Picker
                mode="dialog"
                onValueChange={[Function]}
                selectedValue="bluebase-dark"
                style={
                  Object {
                    "width": 150,
                  }
                }
              >
                <PickerIOS
                  mode="dialog"
                  onValueChange={[Function]}
                  selectedValue="bluebase-dark"
                  style={
                    Object {
                      "width": 150,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "width": 150,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "width": 150,
                        }
                      }
                    >
                      <_class
                        items={
                          Array [
                            Object {
                              "label": "BlueBase Light",
                              "textColor": undefined,
                              "value": "bluebase-light",
                            },
                            Object {
                              "label": "BlueBase Dark",
                              "textColor": undefined,
                              "value": "bluebase-dark",
                            },
                          ]
                        }
                        onChange={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        selectedIndex={1}
                        style={
                          Array [
                            Object {
                              "height": 216,
                            },
                            undefined,
                          ]
                        }
                      >
                        <RCTPicker
                          items={
                            Array [
                              Object {
                                "label": "BlueBase Light",
                                "textColor": undefined,
                                "value": "bluebase-light",
                              },
                              Object {
                                "label": "BlueBase Dark",
                                "textColor": undefined,
                                "value": "bluebase-dark",
                              },
                            ]
                          }
                          onChange={[Function]}
                          onResponderTerminationRequest={[Function]}
                          onStartShouldSetResponder={[Function]}
                          selectedIndex={1}
                          style={
                            Array [
                              Object {
                                "height": 216,
                              },
                              undefined,
                            ]
                          }
                        />
                      </_class>
                    </View>
                  </View>
                </PickerIOS>
              </Picker>
            </ThemePicker>
            <ThemeDemo>
              <View
                style={
                  Object {
                    "backgroundColor": "#303030",
                    "padding": 8,
                  }
                }
              >
                <ThemedComponent
                  style={
                    Object {
                      "backgroundColor": "#303030",
                      "padding": 8,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "backgroundColor": "#303030",
                        "padding": 8,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "backgroundColor": "#303030",
                          "padding": 8,
                        }
                      }
                    >
                      <Body1>
                        <ThemedComponent>
                          <Component
                            styles={
                              Object {
                                "root": Object {
                                  "color": "#ffffff",
                                  "fontFamily": "Helvetica",
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                              }
                            }
                          >
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "#ffffff",
                                    "fontFamily": "Helvetica",
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  undefined,
                                ]
                              }
                            >
                              <Text
                                style={
                                  Array [
                                    Object {
                                      "color": "#ffffff",
                                      "fontFamily": "Helvetica",
                                      "fontSize": 16,
                                      "fontWeight": "400",
                                    },
                                    undefined,
                                  ]
                                }
                              >
                                BlueBase Dark
                              </Text>
                            </Text>
                          </Component>
                        </ThemedComponent>
                      </Body1>
                    </View>
                  </View>
                </ThemedComponent>
              </View>
            </ThemeDemo>
          </SystemApp>
        </ThemedComponent>
      </SystemApp>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`ThemeContext should override a theme 1`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <SystemApp>
        <ThemedComponent>
          <SystemApp>
            <ThemeProvider
              overrides={
                Object {
                  "palette": Object {
                    "background": Object {
                      "default": "red",
                    },
                  },
                }
              }
              theme="bluebase-dark"
            >
              <ThemeDemo>
                <View
                  style={
                    Object {
                      "backgroundColor": "red",
                      "padding": 8,
                    }
                  }
                >
                  <ThemedComponent
                    style={
                      Object {
                        "backgroundColor": "red",
                        "padding": 8,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "backgroundColor": "red",
                          "padding": 8,
                        }
                      }
                    >
                      <View
                        style={
                          Object {
                            "backgroundColor": "red",
                            "padding": 8,
                          }
                        }
                      >
                        <Body1>
                          <ThemedComponent>
                            <Component
                              styles={
                                Object {
                                  "root": Object {
                                    "color": "#ffffff",
                                    "fontFamily": "Helvetica",
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                }
                              }
                            >
                              <Text
                                style={
                                  Array [
                                    Object {
                                      "color": "#ffffff",
                                      "fontFamily": "Helvetica",
                                      "fontSize": 16,
                                      "fontWeight": "400",
                                    },
                                    undefined,
                                  ]
                                }
                              >
                                <Text
                                  style={
                                    Array [
                                      Object {
                                        "color": "#ffffff",
                                        "fontFamily": "Helvetica",
                                        "fontSize": 16,
                                        "fontWeight": "400",
                                      },
                                      undefined,
                                    ]
                                  }
                                >
                                  BlueBase Dark
                                </Text>
                              </Text>
                            </Component>
                          </ThemedComponent>
                        </Body1>
                      </View>
                    </View>
                  </ThemedComponent>
                </View>
              </ThemeDemo>
            </ThemeProvider>
          </SystemApp>
        </ThemedComponent>
      </SystemApp>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`ThemeContext should render a ThemeDemo component with themed background color 1`] = `
<Text>
  Loading
</Text>
`;

exports[`ThemeContext should render a ThemeDemo component with themed background color 2`] = `
<View
  style={
    Object {
      "backgroundColor": "#fafafa",
      "padding": 8,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "rgba(0, 0, 0, 0.87)",
          "fontFamily": "Helvetica",
          "fontSize": 16,
          "fontWeight": "400",
        },
        undefined,
      ]
    }
  >
    BlueBase Light
  </Text>
</View>
`;

exports[`ThemeContext should render a overwritten ThemeDemo component with red background color 1`] = `
<Text>
  Loading
</Text>
`;

exports[`ThemeContext should render a overwritten ThemeDemo component with red background color 2`] = `
<View
  style={
    Object {
      "backgroundColor": "red",
      "padding": 8,
    }
  }
>
  <Text
    style={
      Array [
        Object {
          "color": "#ffffff",
          "fontFamily": "Helvetica",
          "fontSize": 16,
          "fontWeight": "400",
        },
        undefined,
      ]
    }
  >
    BlueBase Dark
  </Text>
</View>
`;

exports[`ThemeContext should throw an error when changing theme based to unknown theme 1`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <SystemApp>
        <ThemedComponent>
          <SystemApp>
            <ThemePicker>
              <Picker
                mode="dialog"
                onValueChange={[Function]}
                selectedValue="bluebase-light"
                style={
                  Object {
                    "width": 150,
                  }
                }
              >
                <PickerIOS
                  mode="dialog"
                  onValueChange={[Function]}
                  selectedValue="bluebase-light"
                  style={
                    Object {
                      "width": 150,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "width": 150,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "width": 150,
                        }
                      }
                    >
                      <_class
                        items={
                          Array [
                            Object {
                              "label": "BlueBase Light",
                              "textColor": undefined,
                              "value": "bluebase-light",
                            },
                            Object {
                              "label": "BlueBase Dark",
                              "textColor": undefined,
                              "value": "bluebase-dark",
                            },
                          ]
                        }
                        onChange={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        selectedIndex={0}
                        style={
                          Array [
                            Object {
                              "height": 216,
                            },
                            undefined,
                          ]
                        }
                      >
                        <RCTPicker
                          items={
                            Array [
                              Object {
                                "label": "BlueBase Light",
                                "textColor": undefined,
                                "value": "bluebase-light",
                              },
                              Object {
                                "label": "BlueBase Dark",
                                "textColor": undefined,
                                "value": "bluebase-dark",
                              },
                            ]
                          }
                          onChange={[Function]}
                          onResponderTerminationRequest={[Function]}
                          onStartShouldSetResponder={[Function]}
                          selectedIndex={0}
                          style={
                            Array [
                              Object {
                                "height": 216,
                              },
                              undefined,
                            ]
                          }
                        />
                      </_class>
                    </View>
                  </View>
                </PickerIOS>
              </Picker>
            </ThemePicker>
            <ThemeDemo>
              <View
                style={
                  Object {
                    "backgroundColor": "#fafafa",
                    "padding": 8,
                  }
                }
              >
                <ThemedComponent
                  style={
                    Object {
                      "backgroundColor": "#fafafa",
                      "padding": 8,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "backgroundColor": "#fafafa",
                        "padding": 8,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "backgroundColor": "#fafafa",
                          "padding": 8,
                        }
                      }
                    >
                      <Body1>
                        <ThemedComponent>
                          <Component
                            styles={
                              Object {
                                "root": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": "Helvetica",
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                              }
                            }
                          >
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "Helvetica",
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  undefined,
                                ]
                              }
                            >
                              <Text
                                style={
                                  Array [
                                    Object {
                                      "color": "rgba(0, 0, 0, 0.87)",
                                      "fontFamily": "Helvetica",
                                      "fontSize": 16,
                                      "fontWeight": "400",
                                    },
                                    undefined,
                                  ]
                                }
                              >
                                BlueBase Light
                              </Text>
                            </Text>
                          </Component>
                        </ThemedComponent>
                      </Body1>
                    </View>
                  </View>
                </ThemedComponent>
              </View>
            </ThemeDemo>
          </SystemApp>
        </ThemedComponent>
      </SystemApp>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`ThemeContext should throw an error when changing theme based to unknown theme 2`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <ErrorState
        error={[Error: Could not change theme. Reason: Theme with the key "does-not-exist" does not exist.]}
        retry={[Function]}
      >
        <ThemedComponent
          error={[Error: Could not change theme. Reason: Theme with the key "does-not-exist" does not exist.]}
          retry={[Function]}
        />
      </ErrorState>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`ThemeContext should throw render error state if state.theme is undefined 1`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <SystemApp>
        <ThemedComponent>
          <SystemApp>
            <ThemePicker>
              <Picker
                mode="dialog"
                onValueChange={[Function]}
                selectedValue="bluebase-light"
                style={
                  Object {
                    "width": 150,
                  }
                }
              >
                <PickerIOS
                  mode="dialog"
                  onValueChange={[Function]}
                  selectedValue="bluebase-light"
                  style={
                    Object {
                      "width": 150,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "width": 150,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "width": 150,
                        }
                      }
                    >
                      <_class
                        items={
                          Array [
                            Object {
                              "label": "BlueBase Light",
                              "textColor": undefined,
                              "value": "bluebase-light",
                            },
                            Object {
                              "label": "BlueBase Dark",
                              "textColor": undefined,
                              "value": "bluebase-dark",
                            },
                          ]
                        }
                        onChange={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        selectedIndex={0}
                        style={
                          Array [
                            Object {
                              "height": 216,
                            },
                            undefined,
                          ]
                        }
                      >
                        <RCTPicker
                          items={
                            Array [
                              Object {
                                "label": "BlueBase Light",
                                "textColor": undefined,
                                "value": "bluebase-light",
                              },
                              Object {
                                "label": "BlueBase Dark",
                                "textColor": undefined,
                                "value": "bluebase-dark",
                              },
                            ]
                          }
                          onChange={[Function]}
                          onResponderTerminationRequest={[Function]}
                          onStartShouldSetResponder={[Function]}
                          selectedIndex={0}
                          style={
                            Array [
                              Object {
                                "height": 216,
                              },
                              undefined,
                            ]
                          }
                        />
                      </_class>
                    </View>
                  </View>
                </PickerIOS>
              </Picker>
            </ThemePicker>
            <ThemeDemo>
              <View
                style={
                  Object {
                    "backgroundColor": "#fafafa",
                    "padding": 8,
                  }
                }
              >
                <ThemedComponent
                  style={
                    Object {
                      "backgroundColor": "#fafafa",
                      "padding": 8,
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "backgroundColor": "#fafafa",
                        "padding": 8,
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "backgroundColor": "#fafafa",
                          "padding": 8,
                        }
                      }
                    >
                      <Body1>
                        <ThemedComponent>
                          <Component
                            styles={
                              Object {
                                "root": Object {
                                  "color": "rgba(0, 0, 0, 0.87)",
                                  "fontFamily": "Helvetica",
                                  "fontSize": 16,
                                  "fontWeight": "400",
                                },
                              }
                            }
                          >
                            <Text
                              style={
                                Array [
                                  Object {
                                    "color": "rgba(0, 0, 0, 0.87)",
                                    "fontFamily": "Helvetica",
                                    "fontSize": 16,
                                    "fontWeight": "400",
                                  },
                                  undefined,
                                ]
                              }
                            >
                              <Text
                                style={
                                  Array [
                                    Object {
                                      "color": "rgba(0, 0, 0, 0.87)",
                                      "fontFamily": "Helvetica",
                                      "fontSize": 16,
                                      "fontWeight": "400",
                                    },
                                    undefined,
                                  ]
                                }
                              >
                                BlueBase Light
                              </Text>
                            </Text>
                          </Component>
                        </ThemedComponent>
                      </Body1>
                    </View>
                  </View>
                </ThemedComponent>
              </View>
            </ThemeDemo>
          </SystemApp>
        </ThemedComponent>
      </SystemApp>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`ThemeContext should throw render error state if state.theme is undefined 2`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <ErrorState
        error={[Error: Could not load theme.]}
      >
        <ThemedComponent
          error={[Error: Could not load theme.]}
        />
      </ErrorState>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;
