// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Link should call the push function with the given path 1`] = `
Object {
  "getParam": [MockFunction],
  "goBack": [MockFunction],
  "navigate": [MockFunction],
  "pop": [MockFunction],
  "push": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "path": "/foo",
        },
        undefined,
      ],
    ],
    "results": Array [
      Object {
        "isThrow": false,
        "value": undefined,
      },
    ],
  },
  "replace": [MockFunction],
  "setParams": [MockFunction],
  "source": null,
  "state": Object {
    "key": "",
    "params": Object {},
    "routeName": "",
    "url": "",
  },
}
`;

exports[`Link should call the push function with the given path 2`] = `
<BlueBaseApp
  components={
    Object {
      "NavigationActions": [Function],
    }
  }
>
  <BlueBaseRoot>
    <ThemeProvider>
      <Link
        component={[Function]}
        path="/foo"
        replace={false}
      >
        <NavigationActions>
          <ThemedComponent>
            <Component>
              <TouchableItem
                borderless={false}
                href="/foo"
                onPress={[Function]}
                pressColor="rgba(0, 0, 0, .32)"
              >
                <TouchableOpacity
                  activeOpacity={0.2}
                  borderless={false}
                  hitSlop={
                    Object {
                      "bottom": 10,
                      "left": 10,
                      "right": 10,
                      "top": 10,
                    }
                  }
                  href="/foo"
                  onPress={[Function]}
                  pressColor="rgba(0, 0, 0, .32)"
                >
                  <AnimatedComponent
                    accessible={true}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    isTVSelectable={true}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                  >
                    <View
                      accessible={true}
                      hitSlop={
                        Object {
                          "bottom": 10,
                          "left": 10,
                          "right": 10,
                          "top": 10,
                        }
                      }
                      isTVSelectable={true}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "opacity": 1,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        hitSlop={
                          Object {
                            "bottom": 10,
                            "left": 10,
                            "right": 10,
                            "top": 10,
                          }
                        }
                        isTVSelectable={true}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                      />
                    </View>
                  </AnimatedComponent>
                </TouchableOpacity>
              </TouchableItem>
            </Component>
          </ThemedComponent>
        </NavigationActions>
      </Link>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`Link should call the push function with the given path 3`] = `
Object {
  "getParam": [MockFunction],
  "goBack": [MockFunction],
  "navigate": [MockFunction],
  "pop": [MockFunction],
  "push": [MockFunction],
  "replace": [MockFunction],
  "setParams": [MockFunction],
  "source": null,
  "state": Object {
    "key": "",
    "params": Object {},
    "routeName": "",
    "url": "",
  },
}
`;

exports[`Link should call the push function with the given path 4`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <Link
        component={[Function]}
        onPress={
          [MockFunction] {
            "calls": Array [
              Array [
                Object {
                  "defaultPrevented": false,
                  "preventDefault": [Function],
                },
                Object {
                  "getParam": [MockFunction],
                  "goBack": [MockFunction],
                  "navigate": [MockFunction],
                  "pop": [MockFunction],
                  "push": [MockFunction],
                  "replace": [MockFunction],
                  "setParams": [MockFunction],
                  "source": null,
                  "state": Object {
                    "key": "",
                    "params": Object {},
                    "routeName": "",
                    "url": "",
                  },
                },
              ],
            ],
            "results": Array [
              Object {
                "isThrow": false,
                "value": undefined,
              },
            ],
          }
        }
        path="/foo"
        replace={false}
      >
        <NavigationActions>
          <ThemedComponent>
            <Component>
              <TouchableItem
                borderless={false}
                href="/foo"
                onPress={
                  [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "defaultPrevented": false,
                          "preventDefault": [Function],
                        },
                        Object {
                          "getParam": [MockFunction],
                          "goBack": [MockFunction],
                          "navigate": [MockFunction],
                          "pop": [MockFunction],
                          "push": [MockFunction],
                          "replace": [MockFunction],
                          "setParams": [MockFunction],
                          "source": null,
                          "state": Object {
                            "key": "",
                            "params": Object {},
                            "routeName": "",
                            "url": "",
                          },
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "isThrow": false,
                        "value": undefined,
                      },
                    ],
                  }
                }
                pressColor="rgba(0, 0, 0, .32)"
              >
                <TouchableOpacity
                  activeOpacity={0.2}
                  borderless={false}
                  hitSlop={
                    Object {
                      "bottom": 10,
                      "left": 10,
                      "right": 10,
                      "top": 10,
                    }
                  }
                  href="/foo"
                  onPress={
                    [MockFunction] {
                      "calls": Array [
                        Array [
                          Object {
                            "defaultPrevented": false,
                            "preventDefault": [Function],
                          },
                          Object {
                            "getParam": [MockFunction],
                            "goBack": [MockFunction],
                            "navigate": [MockFunction],
                            "pop": [MockFunction],
                            "push": [MockFunction],
                            "replace": [MockFunction],
                            "setParams": [MockFunction],
                            "source": null,
                            "state": Object {
                              "key": "",
                              "params": Object {},
                              "routeName": "",
                              "url": "",
                            },
                          },
                        ],
                      ],
                      "results": Array [
                        Object {
                          "isThrow": false,
                          "value": undefined,
                        },
                      ],
                    }
                  }
                  pressColor="rgba(0, 0, 0, .32)"
                >
                  <AnimatedComponent
                    accessible={true}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    isTVSelectable={true}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                  >
                    <View
                      accessible={true}
                      hitSlop={
                        Object {
                          "bottom": 10,
                          "left": 10,
                          "right": 10,
                          "top": 10,
                        }
                      }
                      isTVSelectable={true}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "opacity": 1,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        hitSlop={
                          Object {
                            "bottom": 10,
                            "left": 10,
                            "right": 10,
                            "top": 10,
                          }
                        }
                        isTVSelectable={true}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                      />
                    </View>
                  </AnimatedComponent>
                </TouchableOpacity>
              </TouchableItem>
            </Component>
          </ThemedComponent>
        </NavigationActions>
      </Link>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`Link should call the push function with the given routeName 1`] = `
Object {
  "getParam": [MockFunction],
  "goBack": [MockFunction],
  "navigate": [MockFunction],
  "pop": [MockFunction],
  "push": [MockFunction] {
    "calls": Array [
      Array [
        "Foo",
        undefined,
      ],
    ],
    "results": Array [
      Object {
        "isThrow": false,
        "value": undefined,
      },
    ],
  },
  "replace": [MockFunction],
  "setParams": [MockFunction],
  "source": null,
  "state": Object {
    "key": "",
    "params": Object {},
    "routeName": "",
    "url": "",
  },
}
`;

exports[`Link should call the push function with the given routeName 2`] = `
<BlueBaseApp
  components={
    Object {
      "NavigationActions": [Function],
    }
  }
>
  <BlueBaseRoot>
    <ThemeProvider>
      <Link
        component={[Function]}
        replace={false}
        routeName="Foo"
      >
        <NavigationActions>
          <ThemedComponent>
            <Component>
              <TouchableItem
                borderless={false}
                href=""
                onPress={[Function]}
                pressColor="rgba(0, 0, 0, .32)"
              >
                <TouchableOpacity
                  activeOpacity={0.2}
                  borderless={false}
                  hitSlop={
                    Object {
                      "bottom": 10,
                      "left": 10,
                      "right": 10,
                      "top": 10,
                    }
                  }
                  href=""
                  onPress={[Function]}
                  pressColor="rgba(0, 0, 0, .32)"
                >
                  <AnimatedComponent
                    accessible={true}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    isTVSelectable={true}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                  >
                    <View
                      accessible={true}
                      hitSlop={
                        Object {
                          "bottom": 10,
                          "left": 10,
                          "right": 10,
                          "top": 10,
                        }
                      }
                      isTVSelectable={true}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "opacity": 1,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        hitSlop={
                          Object {
                            "bottom": 10,
                            "left": 10,
                            "right": 10,
                            "top": 10,
                          }
                        }
                        isTVSelectable={true}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                      />
                    </View>
                  </AnimatedComponent>
                </TouchableOpacity>
              </TouchableItem>
            </Component>
          </ThemedComponent>
        </NavigationActions>
      </Link>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`Link should call the replace function with the given path 1`] = `
Object {
  "getParam": [MockFunction],
  "goBack": [MockFunction],
  "navigate": [MockFunction],
  "pop": [MockFunction],
  "push": [MockFunction],
  "replace": [MockFunction] {
    "calls": Array [
      Array [
        Object {
          "path": "/foo",
        },
        undefined,
      ],
    ],
    "results": Array [
      Object {
        "isThrow": false,
        "value": undefined,
      },
    ],
  },
  "setParams": [MockFunction],
  "source": null,
  "state": Object {
    "key": "",
    "params": Object {},
    "routeName": "",
    "url": "",
  },
}
`;

exports[`Link should call the replace function with the given path 2`] = `
<BlueBaseApp
  components={
    Object {
      "NavigationActions": [Function],
    }
  }
>
  <BlueBaseRoot>
    <ThemeProvider>
      <Link
        component={[Function]}
        path="/foo"
        replace={true}
      >
        <NavigationActions>
          <ThemedComponent>
            <Component>
              <TouchableItem
                borderless={false}
                href="/foo"
                onPress={[Function]}
                pressColor="rgba(0, 0, 0, .32)"
              >
                <TouchableOpacity
                  activeOpacity={0.2}
                  borderless={false}
                  hitSlop={
                    Object {
                      "bottom": 10,
                      "left": 10,
                      "right": 10,
                      "top": 10,
                    }
                  }
                  href="/foo"
                  onPress={[Function]}
                  pressColor="rgba(0, 0, 0, .32)"
                >
                  <AnimatedComponent
                    accessible={true}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    isTVSelectable={true}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                  >
                    <View
                      accessible={true}
                      hitSlop={
                        Object {
                          "bottom": 10,
                          "left": 10,
                          "right": 10,
                          "top": 10,
                        }
                      }
                      isTVSelectable={true}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "opacity": 1,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        hitSlop={
                          Object {
                            "bottom": 10,
                            "left": 10,
                            "right": 10,
                            "top": 10,
                          }
                        }
                        isTVSelectable={true}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                      />
                    </View>
                  </AnimatedComponent>
                </TouchableOpacity>
              </TouchableItem>
            </Component>
          </ThemedComponent>
        </NavigationActions>
      </Link>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`Link should not do anything if event.defaultPrevented is true 1`] = `
Object {
  "getParam": [MockFunction],
  "goBack": [MockFunction],
  "navigate": [MockFunction],
  "pop": [MockFunction],
  "push": [MockFunction],
  "replace": [MockFunction],
  "setParams": [MockFunction],
  "source": null,
  "state": Object {
    "key": "",
    "params": Object {},
    "routeName": "",
    "url": "",
  },
}
`;

exports[`Link should not do anything if event.defaultPrevented is true 2`] = `
<BlueBaseApp
  components={
    Object {
      "NavigationActions": [Function],
    }
  }
>
  <BlueBaseRoot>
    <ThemeProvider>
      <Link
        component={[Function]}
        path="/foo"
        replace={true}
      >
        <NavigationActions>
          <ThemedComponent>
            <Component>
              <TouchableItem
                borderless={false}
                href="/foo"
                onPress={[Function]}
                pressColor="rgba(0, 0, 0, .32)"
              >
                <TouchableOpacity
                  activeOpacity={0.2}
                  borderless={false}
                  hitSlop={
                    Object {
                      "bottom": 10,
                      "left": 10,
                      "right": 10,
                      "top": 10,
                    }
                  }
                  href="/foo"
                  onPress={[Function]}
                  pressColor="rgba(0, 0, 0, .32)"
                >
                  <AnimatedComponent
                    accessible={true}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    isTVSelectable={true}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                  >
                    <View
                      accessible={true}
                      hitSlop={
                        Object {
                          "bottom": 10,
                          "left": 10,
                          "right": 10,
                          "top": 10,
                        }
                      }
                      isTVSelectable={true}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "opacity": 1,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        hitSlop={
                          Object {
                            "bottom": 10,
                            "left": 10,
                            "right": 10,
                            "top": 10,
                          }
                        }
                        isTVSelectable={true}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                      />
                    </View>
                  </AnimatedComponent>
                </TouchableOpacity>
              </TouchableItem>
            </Component>
          </ThemedComponent>
        </NavigationActions>
      </Link>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`Link should not do anything if there is no path or routeName prop 1`] = `
Object {
  "getParam": [MockFunction],
  "goBack": [MockFunction],
  "navigate": [MockFunction],
  "pop": [MockFunction],
  "push": [MockFunction],
  "replace": [MockFunction],
  "setParams": [MockFunction],
  "source": null,
  "state": Object {
    "key": "",
    "params": Object {},
    "routeName": "",
    "url": "",
  },
}
`;

exports[`Link should not do anything if there is no path or routeName prop 2`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <Link
        component={[Function]}
        replace={false}
      >
        <NavigationActions>
          <ThemedComponent>
            <Component>
              <TouchableItem
                borderless={false}
                href=""
                onPress={[Function]}
                pressColor="rgba(0, 0, 0, .32)"
              >
                <TouchableOpacity
                  activeOpacity={0.2}
                  borderless={false}
                  hitSlop={
                    Object {
                      "bottom": 10,
                      "left": 10,
                      "right": 10,
                      "top": 10,
                    }
                  }
                  href=""
                  onPress={[Function]}
                  pressColor="rgba(0, 0, 0, .32)"
                >
                  <AnimatedComponent
                    accessible={true}
                    hitSlop={
                      Object {
                        "bottom": 10,
                        "left": 10,
                        "right": 10,
                        "top": 10,
                      }
                    }
                    isTVSelectable={true}
                    onResponderGrant={[Function]}
                    onResponderMove={[Function]}
                    onResponderRelease={[Function]}
                    onResponderTerminate={[Function]}
                    onResponderTerminationRequest={[Function]}
                    onStartShouldSetResponder={[Function]}
                    style={
                      Array [
                        undefined,
                        Object {
                          "opacity": 1,
                        },
                      ]
                    }
                  >
                    <View
                      accessible={true}
                      hitSlop={
                        Object {
                          "bottom": 10,
                          "left": 10,
                          "right": 10,
                          "top": 10,
                        }
                      }
                      isTVSelectable={true}
                      onResponderGrant={[Function]}
                      onResponderMove={[Function]}
                      onResponderRelease={[Function]}
                      onResponderTerminate={[Function]}
                      onResponderTerminationRequest={[Function]}
                      onStartShouldSetResponder={[Function]}
                      style={
                        Object {
                          "opacity": 1,
                        }
                      }
                    >
                      <View
                        accessible={true}
                        hitSlop={
                          Object {
                            "bottom": 10,
                            "left": 10,
                            "right": 10,
                            "top": 10,
                          }
                        }
                        isTVSelectable={true}
                        onResponderGrant={[Function]}
                        onResponderMove={[Function]}
                        onResponderRelease={[Function]}
                        onResponderTerminate={[Function]}
                        onResponderTerminationRequest={[Function]}
                        onStartShouldSetResponder={[Function]}
                        style={
                          Object {
                            "opacity": 1,
                          }
                        }
                      />
                    </View>
                  </AnimatedComponent>
                </TouchableOpacity>
              </TouchableItem>
            </Component>
          </ThemedComponent>
        </NavigationActions>
      </Link>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;
