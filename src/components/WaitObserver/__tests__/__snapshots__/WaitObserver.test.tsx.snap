// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WaitObserver should change states based on custom delay & timeout 1`] = `
<WaitObserver
  delay={1000}
  onRetry={[MockFunction]}
  onTimeout={[MockFunction]}
  timeout={3000}
/>
`;

exports[`WaitObserver should change states based on custom delay & timeout 2`] = `
<WaitObserver
  delay={1000}
  onRetry={[MockFunction]}
  onTimeout={[MockFunction]}
  timeout={3000}
>
  <LoadingState
    retry={[Function]}
    timedOut={false}
  >
    <Component>
      <View>
        <Component
          testID="title"
        >
          <Text
            testID="title"
          >
            Loading now...
          </Text>
        </Component>
      </View>
    </Component>
  </LoadingState>
</WaitObserver>
`;

exports[`WaitObserver should change states based on custom delay & timeout 3`] = `
<WaitObserver
  delay={1000}
  onRetry={[MockFunction]}
  onTimeout={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  timeout={3000}
>
  <LoadingState
    retry={[Function]}
    timedOut={true}
  >
    <Component>
      <View>
        <Component
          testID="title"
        >
          <Text
            testID="title"
          >
            This is taking longer than usual
          </Text>
        </Component>
      </View>
    </Component>
  </LoadingState>
</WaitObserver>
`;

exports[`WaitObserver should change states based on custom delay & timeout 4`] = `
<WaitObserver
  delay={1000}
  onRetry={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  onTimeout={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  timeout={3000}
>
  <LoadingState
    retry={[Function]}
    timedOut={false}
  >
    <Component>
      <View>
        <Component
          testID="title"
        >
          <Text
            testID="title"
          >
            Loading now...
          </Text>
        </Component>
      </View>
    </Component>
  </LoadingState>
</WaitObserver>
`;

exports[`WaitObserver should change states based on custom delay & timeout 5`] = `
<WaitObserver
  delay={1000}
  onRetry={
    [MockFunction] {
      "calls": Array [
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  onTimeout={
    [MockFunction] {
      "calls": Array [
        Array [],
        Array [],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  timeout={3000}
>
  <LoadingState
    retry={[Function]}
    timedOut={true}
  >
    <Component>
      <View>
        <Component
          testID="title"
        >
          <Text
            testID="title"
          >
            This is taking longer than usual
          </Text>
        </Component>
      </View>
    </Component>
  </LoadingState>
</WaitObserver>
`;

exports[`WaitObserver should change states based on custom delay & timeouts 1`] = `
<WaitObserver
  delay={false}
  onRetry={[Function]}
  onTimeout={[MockFunction]}
  timeout={false}
/>
`;

exports[`WaitObserver should change states based on custom delay & timeouts 2`] = `
<WaitObserver
  delay={false}
  onRetry={[Function]}
  onTimeout={[MockFunction]}
  timeout={false}
/>
`;

exports[`WaitObserver should change states based on custom delay & timeouts 3`] = `null`;

exports[`WaitObserver should not change states based on timeouts, becuase it gets unmounted 1`] = `
<WaitObserver
  delay={1000}
  onRetry={[Function]}
  onTimeout={[MockFunction]}
  timeout={3000}
/>
`;

exports[`WaitObserver should not change states based on timeouts, becuase it gets unmounted 2`] = `null`;

exports[`WaitObserver should not change states based on timeouts, becuase it gets unmounted 3`] = `null`;

exports[`WaitObserver should show loading state if delay is 0 1`] = `
<WaitObserver
  delay={0}
  onRetry={null}
  onTimeout={null}
  timeout={2000}
>
  <LoadingState>
    <Component>
      <View>
        <Component
          testID="title"
        >
          <Text
            testID="title"
          >
            Loading now...
          </Text>
        </Component>
      </View>
    </Component>
  </LoadingState>
</WaitObserver>
`;

exports[`WaitObserver should show loading state if delay is 0 2`] = `
<WaitObserver
  delay={0}
  onRetry={null}
  onTimeout={null}
  timeout={2000}
>
  <LoadingState>
    <Component>
      <View>
        <Component
          testID="title"
        >
          <Text
            testID="title"
          >
            Loading now...
          </Text>
        </Component>
      </View>
    </Component>
  </LoadingState>
</WaitObserver>
`;

exports[`WaitObserver should show loading state if delay is 0 3`] = `
<WaitObserver
  delay={0}
  onRetry={null}
  onTimeout={null}
  timeout={2000}
>
  <LoadingState>
    <Component>
      <View>
        <Component
          testID="title"
        >
          <Text
            testID="title"
          >
            Loading now...
          </Text>
        </Component>
      </View>
    </Component>
  </LoadingState>
</WaitObserver>
`;
