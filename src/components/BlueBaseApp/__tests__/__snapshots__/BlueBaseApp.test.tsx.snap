// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BlueBaseApp should render BlueBaseApp 1`] = `
<BlueBaseApp>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        <Text>
          Loading
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render BlueBaseApp 2`] = `
<BlueBaseApp>
  <BlueBaseRoot>
    <ThemeProvider>
      <ThemedComponent
        navigator={
          Object {
            "initialRouteName": "Root",
            "routes": Array [
              Object {
                "name": "Root",
                "path": "",
                "screen": "SystemApp",
              },
            ],
            "type": "stack",
          }
        }
      >
        <NavigationProvider
          navigator={
            Object {
              "initialRouteName": "Root",
              "routes": Array [
                Object {
                  "name": "Root",
                  "path": "",
                  "screen": "SystemApp",
                },
              ],
              "type": "stack",
            }
          }
        >
          <ThemedComponent
            initialRouteName="Root"
            routes={
              Array [
                Object {
                  "name": "Root",
                  "path": "",
                  "screen": "SystemApp",
                },
              ]
            }
            type="stack"
          >
            <Navigator
              initialRouteName="Root"
              routes={
                Array [
                  Object {
                    "name": "Root",
                    "path": "",
                    "screen": "SystemApp",
                  },
                ]
              }
              type="stack"
            >
              <ThemedComponent
                key="Root"
              >
                <SystemApp
                  styles={
                    Object {
                      "content": Object {
                        "flex": 1,
                      },
                      "footer": Object {},
                      "header": Object {},
                      "root": Object {
                        "flex": 1,
                      },
                    }
                  }
                >
                  <View
                    style={
                      Array [
                        Object {
                          "flex": 1,
                        },
                        undefined,
                      ]
                    }
                  >
                    <View
                      style={
                        Array [
                          Object {
                            "flex": 1,
                          },
                          undefined,
                        ]
                      }
                    >
                      <ThemedComponent
                        style={Object {}}
                      >
                        <Component
                          style={Object {}}
                        />
                      </ThemedComponent>
                      <ThemedComponent
                        style={
                          Object {
                            "flex": 1,
                          }
                        }
                      >
                        <Component
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            style={
                              Object {
                                "flex": 1,
                              }
                            }
                          >
                            <ThemedComponent
                              style={
                                Object {
                                  "flex": 1,
                                }
                              }
                            >
                              <View
                                style={
                                  Object {
                                    "flex": 1,
                                  }
                                }
                              >
                                <View
                                  style={
                                    Object {
                                      "flex": 1,
                                    }
                                  }
                                />
                              </View>
                            </ThemedComponent>
                          </View>
                        </Component>
                      </ThemedComponent>
                      <ThemedComponent
                        style={Object {}}
                      >
                        <Component
                          style={Object {}}
                        />
                      </ThemedComponent>
                    </View>
                  </View>
                </SystemApp>
              </ThemedComponent>
            </Navigator>
          </ThemedComponent>
        </NavigationProvider>
      </ThemedComponent>
    </ThemeProvider>
  </BlueBaseRoot>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render default app when boot doesn't return anything 1`] = `null`;

exports[`BlueBaseApp should render error state when a child throws an error 1`] = `
<BlueBaseApp>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        <Text>
          Loading
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state when a child throws an error 2`] = `
<BlueBaseApp>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Object {
            "fontWeight": "bold",
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          ðŸš¨ BlueBase Error
        </Text>
      </Text>
      <Text>
        <Text>
          ðŸ’¥ Boom!
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state when boot throws an error 1`] = `
<BlueBaseApp
  BB={
    BlueBase {
      "Analytics": Analytics {
        "BB": [Circular],
      },
      "Components": ComponentRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Configs": ConfigRegistry {
        "BB": [Circular],
        "data": Map {
          "development" => Object {
            "key": "development",
            "value": true,
          },
        },
        "subscriptions": Map {},
      },
      "Hooks": HookRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Logger": Logger {
        "BB": [Circular],
      },
      "Plugins": PluginRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Themes": ThemeRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "boot": [Function],
      "bootOptions": Object {
        "components": Object {},
        "configs": Object {},
        "hooks": Object {},
        "plugins": Array [],
        "themes": Array [],
      },
      "booted": false,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Object {
            "fontWeight": "bold",
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          ðŸš¨ BlueBase Error
        </Text>
      </Text>
      <Text>
        <Text>
          Boot Error!
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state with actual error message when development config is undefined, && isProduction is false 1`] = `
<BlueBaseApp
  BB={
    BlueBase {
      "Analytics": Analytics {
        "BB": [Circular],
      },
      "Components": ComponentRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Configs": ConfigRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Hooks": HookRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Logger": Logger {
        "BB": [Circular],
      },
      "Plugins": PluginRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Themes": ThemeRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "boot": [Function],
      "bootOptions": Object {
        "components": Object {},
        "configs": Object {},
        "hooks": Object {},
        "plugins": Array [],
        "themes": Array [],
      },
      "booted": false,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Object {
            "fontWeight": "bold",
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          ðŸš¨ BlueBase Error
        </Text>
      </Text>
      <Text>
        <Text>
          Boot Error!
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state with custom error message when development config is undefined, && isProduction is true 1`] = `
<BlueBaseApp
  BB={
    BlueBase {
      "Analytics": Analytics {
        "BB": [Circular],
      },
      "Components": ComponentRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Configs": ConfigRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Hooks": HookRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Logger": Logger {
        "BB": [Circular],
      },
      "Plugins": PluginRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "Themes": ThemeRegistry {
        "BB": [Circular],
        "data": Map {},
        "subscriptions": Map {},
      },
      "boot": [Function],
      "bootOptions": Object {
        "components": Object {},
        "configs": Object {},
        "hooks": Object {},
        "plugins": Array [],
        "themes": Array [],
      },
      "booted": false,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Object {
            "fontWeight": "bold",
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          ðŸš¨ BlueBase Error
        </Text>
      </Text>
      <Text>
        <Text>
          An unknown error occured.
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state with custom message when a child throws a null error 1`] = `
<BlueBaseApp>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        <Text>
          Loading
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state with custom message when a child throws a null error 2`] = `
<BlueBaseApp>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Object {
            "fontWeight": "bold",
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          ðŸš¨ BlueBase Error
        </Text>
      </Text>
      <Text>
        <Text>
          An unknown error occured.
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state with custom message when in production mode 1`] = `
<BlueBaseApp
  configs={
    Object {
      "development": false,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text>
        <Text>
          Loading
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;

exports[`BlueBaseApp should render error state with custom message when in production mode 2`] = `
<BlueBaseApp
  configs={
    Object {
      "development": false,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "flex": 1,
        "justifyContent": "center",
      }
    }
  >
    <View
      style={
        Object {
          "alignItems": "center",
          "flex": 1,
          "justifyContent": "center",
        }
      }
    >
      <Text
        style={
          Object {
            "fontWeight": "bold",
          }
        }
      >
        <Text
          style={
            Object {
              "fontWeight": "bold",
            }
          }
        >
          ðŸš¨ BlueBase Error
        </Text>
      </Text>
      <Text>
        <Text>
          An unknown error occured.
        </Text>
      </Text>
    </View>
  </View>
</BlueBaseApp>
`;
